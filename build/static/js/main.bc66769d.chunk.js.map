{"version":3,"sources":["logo.svg","Navbar.js","Searchbar.js","SearchResultItem.js","Searchresults.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","className","id","Searchbar","handleChange","searchtext","type","placeholder","onChange","value","SearchResultItem","data","src","image","url","alt","name","style","color","marginBottom","biography","powerstats","strength","speed","power","Searchresults","superheroData","console","log","map","superhero","App","useState","searchText","setsearchText","setsuperheroData","a","fetch","response","json","results","event","searchTerm","target","length","searchSuperheroes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,4ICS5BC,MARf,SAAgBC,GACZ,OACA,yBAAKC,UAAU,UACX,0BAAMC,GAAG,QAAT,sBCaOC,MAhBf,SAAmBH,GAAM,IAEhBI,EAA2BJ,EAA3BI,aAAaC,EAAcL,EAAdK,WAClB,OACA,6BACG,2BACAC,KAAK,SACLC,YAAY,2BACZL,GAAG,YACHM,SAAUJ,EACVK,MAAOJ,MCiBCK,MA1Bf,SAA0BV,GACzB,IACUW,EAAMX,EAANW,KAEP,OACI,6BACK,yBAAKV,UAAU,iBAChB,yBAAKA,UAAU,QACX,yBAAKW,IAAKD,EAAKE,MAAMC,IAAKC,IAAI,cAElC,yBAAKd,UAAU,SACX,4BAAKU,EAAKK,MACV,0BAAMC,MAAO,CAACC,MAAM,OAAQC,aAAa,IAAKR,EAAKS,UAAU,cAC7D,yBAAKnB,UAAU,SAC3B,2CAAiBU,EAAKU,WAAWC,UACjC,2CAAiBX,EAAKU,WAAWE,OACjC,2CAAiBZ,EAAKU,WAAWG,YCLtBC,MAXf,SAAuBzB,GAAO,IAAD,EACIA,EAAtB0B,qBADkB,MACF,GADE,EAGzB,OADAC,QAAQC,IAAI,sBAAsBF,GAElC,6BACCA,EAAcG,KAAI,SAAAC,GAAS,OACxB,kBAAC,EAAD,CAAkBnB,KAAMmB,SCwCjBC,MAzCf,WAAgB,IAAD,EACsBC,mBAAS,IAD/B,mBACNC,EADM,KACKC,EADL,OAE6BF,mBAAS,IAFtC,mBAENN,EAFM,KAESS,EAFT,iDAIf,8BAAAC,EAAA,sEAE2BC,MAAM,gEAAD,OAAiEJ,IAFjG,cAEUK,EAFV,gBAGuBA,EAASC,OAHhC,OAGU5B,EAHV,OAIIgB,QAAQC,IAAI,UAAUjB,GACtBwB,EAAiBxB,EAAK6B,SAL1B,4CAJe,sBA8Bb,OACE,yBAAKvC,UAAU,OACf,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACf,kBAAC,EAAD,CAAWI,WAAY4B,EAAa7B,aApBpC,SAAsBqC,GAElB,IAAMC,EAAaD,EAAME,OAAOlC,MAChCyB,EAAcQ,GACS,IAApBA,EAAWE,QAEZT,EAAiB,IAIhBO,EAAWE,OAAS,GAxBhB,mCA0BHC,MASR,kBAAC,EAAD,CAAenB,cAAeA,OC9BdoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.bc66769d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nfunction Navbar(props){\r\n    return (\r\n    <div className=\"navbar\">\r\n        <span id=\"logo\">Superhero Hunter</span>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React, {useState} from 'react';\r\nfunction Searchbar(props){\r\n    //console.log(\"search bar props \",props);\r\n  const {handleChange,searchtext} = props;\r\n    return (\r\n    <div>\r\n       <input \r\n       type=\"search\"\r\n       placeholder=\"Hunt superheroes here...\"\r\n       id=\"searchbar\"\r\n       onChange={handleChange}\r\n       value={searchtext}\r\n       />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\n\r\nfunction SearchResultItem(props)\r\n{\r\n    const {data}=props;\r\n   // console.log(\"serachresultitemdata\",data);\r\n    return (\r\n        <div>\r\n             <div className=\"search-result\">\r\n            <div className=\"left\">\r\n                <img src={data.image.url} alt=\"superpic\"/>\r\n            </div>\r\n            <div className=\"right\">\r\n                <h1>{data.name}</h1>\r\n                <span style={{color:'gray', marginBottom:5}}>{data.biography['full-name']}</span>\r\n                <div className=\"stats\">\r\n    <div>Strength : {data.powerstats.strength}</div>\r\n    <div>Speed :    {data.powerstats.speed}</div>\r\n    <div>Power :    {data.powerstats.power}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchResultItem;","import React from 'react';\r\nimport SearchResultItem from './SearchResultItem';\r\nfunction Searchresults(props){\r\n    const {superheroData = []} = props;\r\n    console.log(\"searchresult props \",superheroData);\r\n    return (\r\n    <div>\r\n    {superheroData.map(superhero =>\r\n        <SearchResultItem data={superhero}/>)}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Searchresults;","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Nabvar from './Navbar';\nimport Searchbar from './Searchbar';\nimport Searchresults from './Searchresults';\n\nfunction App() {\n  const [searchText,setsearchText] = useState(\"\");\n  const [superheroData, setsuperheroData] = useState([]);\n\nasync function searchSuperheroes()\n{\n    const response = await fetch(`https://www.superheroapi.com/api.php/2720525751493083/search/${searchText}`)\n    const data = await response.json();\n    console.log(\"data is\",data);\n    setsuperheroData(data.results);\n    \n}\n\n\n    function handleChange(event)\n    {\n        const searchTerm = event.target.value;\n        setsearchText(searchTerm);\n        if(searchTerm.length===0)\n        {\n          setsuperheroData([]);\n        }\n        //console.log(searchTerm);\n        \n        if(searchTerm.length > 2)\n        {\n            searchSuperheroes();\n        }\n    }\n\n  return (\n    <div className=\"App\">\n    <Nabvar/> \n    <div className=\"main\">\n    <Searchbar searchtext={searchText}  handleChange={handleChange} />\n    <Searchresults superheroData={superheroData}/>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}